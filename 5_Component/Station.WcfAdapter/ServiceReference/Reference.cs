//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationModuleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class ApplicationModuleInfo : object
    {
        
        private ServiceReference.ApplicationInfo ApplicationInfoField;
        
        private ServiceReference.ModuleInfo[] ModuleInfosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.ApplicationInfo ApplicationInfo
        {
            get
            {
                return this.ApplicationInfoField;
            }
            set
            {
                this.ApplicationInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.ModuleInfo[] ModuleInfos
        {
            get
            {
                return this.ModuleInfosField;
            }
            set
            {
                this.ModuleInfosField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class ApplicationInfo : object
    {
        
        private int ApplicationIDField;
        
        private string DescriptionField;
        
        private string NameField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplicationID
        {
            get
            {
                return this.ApplicationIDField;
            }
            set
            {
                this.ApplicationIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class ModuleInfo : object
    {
        
        private bool CanApprovalField;
        
        private bool CanCreateField;
        
        private bool CanDeleteField;
        
        private bool CanModifyField;
        
        private bool CanOther1Field;
        
        private bool CanOther2Field;
        
        private bool CanOther3Field;
        
        private bool CanQueryField;
        
        private bool CanUnApprovalField;
        
        private string FuncationNameField;
        
        private bool HasUnderlineField;
        
        private bool IsCloseField;
        
        private string MenuNameField;
        
        private int ModuleIDField;
        
        private string NameField;
        
        private int ParentIDField;
        
        private int SeqField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval
        {
            get
            {
                return this.CanApprovalField;
            }
            set
            {
                this.CanApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate
        {
            get
            {
                return this.CanCreateField;
            }
            set
            {
                this.CanCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete
        {
            get
            {
                return this.CanDeleteField;
            }
            set
            {
                this.CanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify
        {
            get
            {
                return this.CanModifyField;
            }
            set
            {
                this.CanModifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1
        {
            get
            {
                return this.CanOther1Field;
            }
            set
            {
                this.CanOther1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2
        {
            get
            {
                return this.CanOther2Field;
            }
            set
            {
                this.CanOther2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3
        {
            get
            {
                return this.CanOther3Field;
            }
            set
            {
                this.CanOther3Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery
        {
            get
            {
                return this.CanQueryField;
            }
            set
            {
                this.CanQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval
        {
            get
            {
                return this.CanUnApprovalField;
            }
            set
            {
                this.CanUnApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FuncationName
        {
            get
            {
                return this.FuncationNameField;
            }
            set
            {
                this.FuncationNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasUnderline
        {
            get
            {
                return this.HasUnderlineField;
            }
            set
            {
                this.HasUnderlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClose
        {
            get
            {
                return this.IsCloseField;
            }
            set
            {
                this.IsCloseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName
        {
            get
            {
                return this.MenuNameField;
            }
            set
            {
                this.MenuNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID
        {
            get
            {
                return this.ModuleIDField;
            }
            set
            {
                this.ModuleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentID
        {
            get
            {
                return this.ParentIDField;
            }
            set
            {
                this.ParentIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq
        {
            get
            {
                return this.SeqField;
            }
            set
            {
                this.SeqField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class RoleInfo : object
    {
        
        private string DescField;
        
        private bool IsCloseField;
        
        private int LEVELSField;
        
        private string NameField;
        
        private int RoleIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc
        {
            get
            {
                return this.DescField;
            }
            set
            {
                this.DescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClose
        {
            get
            {
                return this.IsCloseField;
            }
            set
            {
                this.IsCloseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LEVELS
        {
            get
            {
                return this.LEVELSField;
            }
            set
            {
                this.LEVELSField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID
        {
            get
            {
                return this.RoleIDField;
            }
            set
            {
                this.RoleIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RolePermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class RolePermissionInfo : object
    {
        
        private ServiceReference.PermissionInfo[] PermissionInfosField;
        
        private ServiceReference.RoleDetailInfo RoleDetailInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.PermissionInfo[] PermissionInfos
        {
            get
            {
                return this.PermissionInfosField;
            }
            set
            {
                this.PermissionInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.RoleDetailInfo RoleDetailInfo
        {
            get
            {
                return this.RoleDetailInfoField;
            }
            set
            {
                this.RoleDetailInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class RoleDetailInfo : object
    {
        
        private ServiceReference.CompanyInfo CompanyInfoField;
        
        private ServiceReference.DepartmentInfo DepartmentInfoField;
        
        private ServiceReference.GroupInfo GroupInfoField;
        
        private string RoleDetailIDField;
        
        private string RoleDetailNameField;
        
        private ServiceReference.RoleInfo RoleInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.CompanyInfo CompanyInfo
        {
            get
            {
                return this.CompanyInfoField;
            }
            set
            {
                this.CompanyInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.DepartmentInfo DepartmentInfo
        {
            get
            {
                return this.DepartmentInfoField;
            }
            set
            {
                this.DepartmentInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.GroupInfo GroupInfo
        {
            get
            {
                return this.GroupInfoField;
            }
            set
            {
                this.GroupInfoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID
        {
            get
            {
                return this.RoleDetailIDField;
            }
            set
            {
                this.RoleDetailIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName
        {
            get
            {
                return this.RoleDetailNameField;
            }
            set
            {
                this.RoleDetailNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.RoleInfo RoleInfo
        {
            get
            {
                return this.RoleInfoField;
            }
            set
            {
                this.RoleInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class PermissionInfo : object
    {
        
        private int AppIDField;
        
        private string AppNameField;
        
        private bool CanApprovalField;
        
        private bool CanCreateField;
        
        private bool CanDeleteField;
        
        private bool CanModifyField;
        
        private bool CanOther1Field;
        
        private bool CanOther2Field;
        
        private bool CanOther3Field;
        
        private bool CanQueryField;
        
        private bool CanUnApprovalField;
        
        private bool HasCanApprovalField;
        
        private bool HasCanCreateField;
        
        private bool HasCanDeleteField;
        
        private bool HasCanModifyField;
        
        private bool HasCanOther1Field;
        
        private bool HasCanOther2Field;
        
        private bool HasCanOther3Field;
        
        private bool HasCanQueryField;
        
        private bool HasCanUnApprovalField;
        
        private int ModuleIDField;
        
        private string ModuleNameField;
        
        private int PermssionIDField;
        
        private string RoleDetailIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AppID
        {
            get
            {
                return this.AppIDField;
            }
            set
            {
                this.AppIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName
        {
            get
            {
                return this.AppNameField;
            }
            set
            {
                this.AppNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval
        {
            get
            {
                return this.CanApprovalField;
            }
            set
            {
                this.CanApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate
        {
            get
            {
                return this.CanCreateField;
            }
            set
            {
                this.CanCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete
        {
            get
            {
                return this.CanDeleteField;
            }
            set
            {
                this.CanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify
        {
            get
            {
                return this.CanModifyField;
            }
            set
            {
                this.CanModifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1
        {
            get
            {
                return this.CanOther1Field;
            }
            set
            {
                this.CanOther1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2
        {
            get
            {
                return this.CanOther2Field;
            }
            set
            {
                this.CanOther2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3
        {
            get
            {
                return this.CanOther3Field;
            }
            set
            {
                this.CanOther3Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery
        {
            get
            {
                return this.CanQueryField;
            }
            set
            {
                this.CanQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval
        {
            get
            {
                return this.CanUnApprovalField;
            }
            set
            {
                this.CanUnApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanApproval
        {
            get
            {
                return this.HasCanApprovalField;
            }
            set
            {
                this.HasCanApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanCreate
        {
            get
            {
                return this.HasCanCreateField;
            }
            set
            {
                this.HasCanCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanDelete
        {
            get
            {
                return this.HasCanDeleteField;
            }
            set
            {
                this.HasCanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanModify
        {
            get
            {
                return this.HasCanModifyField;
            }
            set
            {
                this.HasCanModifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther1
        {
            get
            {
                return this.HasCanOther1Field;
            }
            set
            {
                this.HasCanOther1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther2
        {
            get
            {
                return this.HasCanOther2Field;
            }
            set
            {
                this.HasCanOther2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther3
        {
            get
            {
                return this.HasCanOther3Field;
            }
            set
            {
                this.HasCanOther3Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanQuery
        {
            get
            {
                return this.HasCanQueryField;
            }
            set
            {
                this.HasCanQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanUnApproval
        {
            get
            {
                return this.HasCanUnApprovalField;
            }
            set
            {
                this.HasCanUnApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID
        {
            get
            {
                return this.ModuleIDField;
            }
            set
            {
                this.ModuleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName
        {
            get
            {
                return this.ModuleNameField;
            }
            set
            {
                this.ModuleNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermssionID
        {
            get
            {
                return this.PermssionIDField;
            }
            set
            {
                this.PermssionIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID
        {
            get
            {
                return this.RoleDetailIDField;
            }
            set
            {
                this.RoleDetailIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class CompanyInfo : object
    {
        
        private int CompanyIDField;
        
        private bool IsCompanyField;
        
        private string NameField;
        
        private string RDSLinkField;
        
        private string RdsCompanyCodeField;
        
        private string RdsDatabaseParaField;
        
        private ServiceReference.CompanyInfo.TypeValue TypeField;
        
        private string UFDataLinkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID
        {
            get
            {
                return this.CompanyIDField;
            }
            set
            {
                this.CompanyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompany
        {
            get
            {
                return this.IsCompanyField;
            }
            set
            {
                this.IsCompanyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RDSLink
        {
            get
            {
                return this.RDSLinkField;
            }
            set
            {
                this.RDSLinkField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RdsCompanyCode
        {
            get
            {
                return this.RdsCompanyCodeField;
            }
            set
            {
                this.RdsCompanyCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RdsDatabasePara
        {
            get
            {
                return this.RdsDatabaseParaField;
            }
            set
            {
                this.RdsDatabaseParaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.CompanyInfo.TypeValue Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UFDataLink
        {
            get
            {
                return this.UFDataLinkField;
            }
            set
            {
                this.UFDataLinkField = value;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CompanyInfo.TypeValue", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum TypeValue : int
        {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            不明 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            分公司 = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            代理商 = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class DepartmentInfo : object
    {
        
        private int DeptIDField;
        
        private string DescField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID
        {
            get
            {
                return this.DeptIDField;
            }
            set
            {
                this.DeptIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc
        {
            get
            {
                return this.DescField;
            }
            set
            {
                this.DescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class GroupInfo : object
    {
        
        private string DescField;
        
        private int GroupIDField;
        
        private string NameField;
        
        private string RDSLinkCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc
        {
            get
            {
                return this.DescField;
            }
            set
            {
                this.DescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID
        {
            get
            {
                return this.GroupIDField;
            }
            set
            {
                this.GroupIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RDSLinkCode
        {
            get
            {
                return this.RDSLinkCodeField;
            }
            set
            {
                this.RDSLinkCodeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class UserPermissionInfo : object
    {
        
        private string UserNameField;
        
        private ServiceReference.UserRoleInfo[] UserRoleListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.UserRoleInfo[] UserRoleList
        {
            get
            {
                return this.UserRoleListField;
            }
            set
            {
                this.UserRoleListField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRoleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class UserRoleInfo : object
    {
        
        private string CompanyField;
        
        private int CompanyIDField;
        
        private string DeptField;
        
        private int DeptIDField;
        
        private string GroupField;
        
        private int GroupIDField;
        
        private string ProxeyedUserField;
        
        private string RoleField;
        
        private string RoleDetailIDField;
        
        private string RoleDetailNameField;
        
        private int RoleIDField;
        
        private string UserField;
        
        private string UserNameField;
        
        private int UserRoleIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company
        {
            get
            {
                return this.CompanyField;
            }
            set
            {
                this.CompanyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID
        {
            get
            {
                return this.CompanyIDField;
            }
            set
            {
                this.CompanyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept
        {
            get
            {
                return this.DeptField;
            }
            set
            {
                this.DeptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID
        {
            get
            {
                return this.DeptIDField;
            }
            set
            {
                this.DeptIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID
        {
            get
            {
                return this.GroupIDField;
            }
            set
            {
                this.GroupIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxeyedUser
        {
            get
            {
                return this.ProxeyedUserField;
            }
            set
            {
                this.ProxeyedUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role
        {
            get
            {
                return this.RoleField;
            }
            set
            {
                this.RoleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID
        {
            get
            {
                return this.RoleDetailIDField;
            }
            set
            {
                this.RoleDetailIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName
        {
            get
            {
                return this.RoleDetailNameField;
            }
            set
            {
                this.RoleDetailNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID
        {
            get
            {
                return this.RoleIDField;
            }
            set
            {
                this.RoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User
        {
            get
            {
                return this.UserField;
            }
            set
            {
                this.UserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserRoleID
        {
            get
            {
                return this.UserRoleIDField;
            }
            set
            {
                this.UserRoleIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProxyInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class ProxyInfo : object
    {
        
        private bool CanApprovalField;
        
        private bool CanCreateField;
        
        private bool CanDeleteField;
        
        private bool CanModifyField;
        
        private bool CanOther1Field;
        
        private bool CanOther2Field;
        
        private bool CanOther3Field;
        
        private bool CanQueryField;
        
        private bool CanUnApprovalField;
        
        private string CompanyField;
        
        private int CompanyIDField;
        
        private System.DateTime CreateDateTimeField;
        
        private string CreateUserField;
        
        private string DeptField;
        
        private int DeptIDField;
        
        private System.DateTime EndDateTimeField;
        
        private string GroupField;
        
        private int GroupIDField;
        
        private string MenuNameField;
        
        private int ModuleIDField;
        
        private string ModuleNameField;
        
        private int ProxyIDField;
        
        private string ProxyUserField;
        
        private string ProxyedUserField;
        
        private string RoleDetailIDField;
        
        private string RoleDetailNameField;
        
        private System.DateTime StartDateTimeField;
        
        private bool StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval
        {
            get
            {
                return this.CanApprovalField;
            }
            set
            {
                this.CanApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate
        {
            get
            {
                return this.CanCreateField;
            }
            set
            {
                this.CanCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete
        {
            get
            {
                return this.CanDeleteField;
            }
            set
            {
                this.CanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify
        {
            get
            {
                return this.CanModifyField;
            }
            set
            {
                this.CanModifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1
        {
            get
            {
                return this.CanOther1Field;
            }
            set
            {
                this.CanOther1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2
        {
            get
            {
                return this.CanOther2Field;
            }
            set
            {
                this.CanOther2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3
        {
            get
            {
                return this.CanOther3Field;
            }
            set
            {
                this.CanOther3Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery
        {
            get
            {
                return this.CanQueryField;
            }
            set
            {
                this.CanQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval
        {
            get
            {
                return this.CanUnApprovalField;
            }
            set
            {
                this.CanUnApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company
        {
            get
            {
                return this.CompanyField;
            }
            set
            {
                this.CompanyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID
        {
            get
            {
                return this.CompanyIDField;
            }
            set
            {
                this.CompanyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime
        {
            get
            {
                return this.CreateDateTimeField;
            }
            set
            {
                this.CreateDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateUser
        {
            get
            {
                return this.CreateUserField;
            }
            set
            {
                this.CreateUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept
        {
            get
            {
                return this.DeptField;
            }
            set
            {
                this.DeptField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID
        {
            get
            {
                return this.DeptIDField;
            }
            set
            {
                this.DeptIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDateTime
        {
            get
            {
                return this.EndDateTimeField;
            }
            set
            {
                this.EndDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID
        {
            get
            {
                return this.GroupIDField;
            }
            set
            {
                this.GroupIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName
        {
            get
            {
                return this.MenuNameField;
            }
            set
            {
                this.MenuNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID
        {
            get
            {
                return this.ModuleIDField;
            }
            set
            {
                this.ModuleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName
        {
            get
            {
                return this.ModuleNameField;
            }
            set
            {
                this.ModuleNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProxyID
        {
            get
            {
                return this.ProxyIDField;
            }
            set
            {
                this.ProxyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxyUser
        {
            get
            {
                return this.ProxyUserField;
            }
            set
            {
                this.ProxyUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxyedUser
        {
            get
            {
                return this.ProxyedUserField;
            }
            set
            {
                this.ProxyedUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID
        {
            get
            {
                return this.RoleDetailIDField;
            }
            set
            {
                this.RoleDetailIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName
        {
            get
            {
                return this.RoleDetailNameField;
            }
            set
            {
                this.RoleDetailNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDateTime
        {
            get
            {
                return this.StartDateTimeField;
            }
            set
            {
                this.StartDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class UserInfo : object
    {
        
        private System.DateTime BirthDayField;
        
        private string EmailField;
        
        private string NameField;
        
        private ServiceReference.UserInfo.Gender SexField;
        
        private ServiceReference.UserInfo.StatusType StatusField;
        
        private string Tel1Field;
        
        private string Tel2Field;
        
        private ServiceReference.UserInfo.UserType TypeField;
        
        private string UserFullField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDay
        {
            get
            {
                return this.BirthDayField;
            }
            set
            {
                this.BirthDayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.UserInfo.Gender Sex
        {
            get
            {
                return this.SexField;
            }
            set
            {
                this.SexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.UserInfo.StatusType Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tel1
        {
            get
            {
                return this.Tel1Field;
            }
            set
            {
                this.Tel1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tel2
        {
            get
            {
                return this.Tel2Field;
            }
            set
            {
                this.Tel2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.UserInfo.UserType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFull
        {
            get
            {
                return this.UserFullField;
            }
            set
            {
                this.UserFullField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.Gender", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum Gender : int
        {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            男 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            女 = 1,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.StatusType", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum StatusType : int
        {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            正常 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            关闭 = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            删除 = 2,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.UserType", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum UserType : int
        {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            普通用户 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            管理员 = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModulePermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class ModulePermissionInfo : object
    {
        
        private bool CanApprovalField;
        
        private bool CanCreateField;
        
        private bool CanDeleteField;
        
        private bool CanModifyField;
        
        private bool CanOther1Field;
        
        private bool CanOther2Field;
        
        private bool CanOther3Field;
        
        private bool CanQueryField;
        
        private bool CanUnApprovalField;
        
        private string MenuNameField;
        
        private int ModuleIDField;
        
        private string ModuleNameField;
        
        private string[] RoleDetailIDListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval
        {
            get
            {
                return this.CanApprovalField;
            }
            set
            {
                this.CanApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate
        {
            get
            {
                return this.CanCreateField;
            }
            set
            {
                this.CanCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete
        {
            get
            {
                return this.CanDeleteField;
            }
            set
            {
                this.CanDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify
        {
            get
            {
                return this.CanModifyField;
            }
            set
            {
                this.CanModifyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1
        {
            get
            {
                return this.CanOther1Field;
            }
            set
            {
                this.CanOther1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2
        {
            get
            {
                return this.CanOther2Field;
            }
            set
            {
                this.CanOther2Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3
        {
            get
            {
                return this.CanOther3Field;
            }
            set
            {
                this.CanOther3Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery
        {
            get
            {
                return this.CanQueryField;
            }
            set
            {
                this.CanQueryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval
        {
            get
            {
                return this.CanUnApprovalField;
            }
            set
            {
                this.CanUnApprovalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName
        {
            get
            {
                return this.MenuNameField;
            }
            set
            {
                this.MenuNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID
        {
            get
            {
                return this.ModuleIDField;
            }
            set
            {
                this.ModuleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName
        {
            get
            {
                return this.ModuleNameField;
            }
            set
            {
                this.ModuleNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RoleDetailIDList
        {
            get
            {
                return this.RoleDetailIDListField;
            }
            set
            {
                this.RoleDetailIDListField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedLogInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class AuthorizedLogInfo : object
    {
        
        private string ActivityField;
        
        private ServiceReference.AuthorizedLogInfo.ActivityTypeValue ActivityTypeField;
        
        private System.DateTime DateField;
        
        private int LogIDField;
        
        private string OperatorNameField;
        
        private ServiceReference.RoleDetailInfo RoleDetailField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Activity
        {
            get
            {
                return this.ActivityField;
            }
            set
            {
                this.ActivityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.AuthorizedLogInfo.ActivityTypeValue ActivityType
        {
            get
            {
                return this.ActivityTypeField;
            }
            set
            {
                this.ActivityTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogID
        {
            get
            {
                return this.LogIDField;
            }
            set
            {
                this.LogIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorName
        {
            get
            {
                return this.OperatorNameField;
            }
            set
            {
                this.OperatorNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.RoleDetailInfo RoleDetail
        {
            get
            {
                return this.RoleDetailField;
            }
            set
            {
                this.RoleDetailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedLogInfo.ActivityTypeValue", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum ActivityTypeValue : int
        {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            普通授权 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            代理授权 = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class MenuInfo : object
    {
        
        private string ClassField;
        
        private string DLLField;
        
        private int MenuIDField;
        
        private int ModuleIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class
        {
            get
            {
                return this.ClassField;
            }
            set
            {
                this.ClassField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DLL
        {
            get
            {
                return this.DLLField;
            }
            set
            {
                this.DLLField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MenuID
        {
            get
            {
                return this.MenuIDField;
            }
            set
            {
                this.MenuIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID
        {
            get
            {
                return this.ModuleIDField;
            }
            set
            {
                this.ModuleIDField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IApplicationModule")]
    public interface IApplicationModule
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationModuleResponse")]
        System.Threading.Tasks.Task<ServiceReference.ApplicationModuleInfo> GetApplicationModuleAsync(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ModuleInApplication", ReplyAction="http://tempuri.org/IApplicationModule/ModuleInApplicationResponse")]
        System.Threading.Tasks.Task<bool> ModuleInApplicationAsync(ServiceReference.ApplicationInfo app, ServiceReference.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationByModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationByModuleResponse")]
        System.Threading.Tasks.Task<ServiceReference.ApplicationInfo> GetApplicationByModuleAsync(ServiceReference.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationAddMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationAddMoudlesResponse")]
        System.Threading.Tasks.Task ApplicationAddMoudlesAsync(ServiceReference.ModuleInfo[] modules, ServiceReference.ApplicationInfo app, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudlesResponse")]
        System.Threading.Tasks.Task ApplicationRemoveMoudlesAsync(ServiceReference.ModuleInfo[] modules, ServiceReference.ApplicationInfo app, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IApplicationModuleChannel : ServiceReference.IApplicationModule, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class ApplicationModuleClient : System.ServiceModel.ClientBase<ServiceReference.IApplicationModule>, ServiceReference.IApplicationModule
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApplicationModuleClient() : 
                base(ApplicationModuleClient.GetDefaultBinding(), ApplicationModuleClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IApplicationModule.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationModuleClient(EndpointConfiguration endpointConfiguration) : 
                base(ApplicationModuleClient.GetBindingForEndpoint(endpointConfiguration), ApplicationModuleClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationModuleClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApplicationModuleClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationModuleClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApplicationModuleClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationModuleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ApplicationModuleInfo> GetApplicationModuleAsync(int appID, string guid)
        {
            return base.Channel.GetApplicationModuleAsync(appID, guid);
        }
        
        public System.Threading.Tasks.Task<bool> ModuleInApplicationAsync(ServiceReference.ApplicationInfo app, ServiceReference.ModuleInfo module, string guid)
        {
            return base.Channel.ModuleInApplicationAsync(app, module, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ApplicationInfo> GetApplicationByModuleAsync(ServiceReference.ModuleInfo module, string guid)
        {
            return base.Channel.GetApplicationByModuleAsync(module, guid);
        }
        
        public System.Threading.Tasks.Task ApplicationAddMoudlesAsync(ServiceReference.ModuleInfo[] modules, ServiceReference.ApplicationInfo app, string guid)
        {
            return base.Channel.ApplicationAddMoudlesAsync(modules, app, guid);
        }
        
        public System.Threading.Tasks.Task ApplicationRemoveMoudlesAsync(ServiceReference.ModuleInfo[] modules, ServiceReference.ApplicationInfo app, string guid)
        {
            return base.Channel.ApplicationRemoveMoudlesAsync(modules, app, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IApplicationModule))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IApplicationModule))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/ApplicationModule");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApplicationModuleClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IApplicationModule);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApplicationModuleClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IApplicationModule);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IApplicationModule,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IApplication")]
    public interface IApplication
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationByID", ReplyAction="http://tempuri.org/IApplication/GetApplicationByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.ApplicationInfo> GetApplicationByIDAsync(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationList", ReplyAction="http://tempuri.org/IApplication/GetApplicationListResponse")]
        System.Threading.Tasks.Task<ServiceReference.ApplicationInfo[]> GetApplicationListAsync(string[] version, string[] name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/AddApplication", ReplyAction="http://tempuri.org/IApplication/AddApplicationResponse")]
        System.Threading.Tasks.Task AddApplicationAsync(ServiceReference.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/ModifyApplication", ReplyAction="http://tempuri.org/IApplication/ModifyApplicationResponse")]
        System.Threading.Tasks.Task ModifyApplicationAsync(ServiceReference.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/DeleteApplication", ReplyAction="http://tempuri.org/IApplication/DeleteApplicationResponse")]
        System.Threading.Tasks.Task DeleteApplicationAsync(ServiceReference.ApplicationInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IApplicationChannel : ServiceReference.IApplication, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class ApplicationClient : System.ServiceModel.ClientBase<ServiceReference.IApplication>, ServiceReference.IApplication
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApplicationClient() : 
                base(ApplicationClient.GetDefaultBinding(), ApplicationClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IApplication.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), ApplicationClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ApplicationInfo> GetApplicationByIDAsync(int appID, string guid)
        {
            return base.Channel.GetApplicationByIDAsync(appID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ApplicationInfo[]> GetApplicationListAsync(string[] version, string[] name, string guid)
        {
            return base.Channel.GetApplicationListAsync(version, name, guid);
        }
        
        public System.Threading.Tasks.Task AddApplicationAsync(ServiceReference.ApplicationInfo value, string guid)
        {
            return base.Channel.AddApplicationAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyApplicationAsync(ServiceReference.ApplicationInfo value, string guid)
        {
            return base.Channel.ModifyApplicationAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteApplicationAsync(ServiceReference.ApplicationInfo value, string guid)
        {
            return base.Channel.DeleteApplicationAsync(value, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IApplication))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IApplication))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Application");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApplicationClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IApplication);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApplicationClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IApplication);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IApplication,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IModule")]
    public interface IModule
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleByID", ReplyAction="http://tempuri.org/IModule/GetModuleByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.ModuleInfo> GetModuleByIDAsync(int moduleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleList", ReplyAction="http://tempuri.org/IModule/GetModuleListResponse")]
        System.Threading.Tasks.Task<ServiceReference.ModuleInfo[]> GetModuleListAsync(string menuName, System.Nullable<int> parentID, string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/ModifyModule", ReplyAction="http://tempuri.org/IModule/ModifyModuleResponse")]
        System.Threading.Tasks.Task ModifyModuleAsync(ServiceReference.ModuleInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IModuleChannel : ServiceReference.IModule, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class ModuleClient : System.ServiceModel.ClientBase<ServiceReference.IModule>, ServiceReference.IModule
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ModuleClient() : 
                base(ModuleClient.GetDefaultBinding(), ModuleClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IModule.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ModuleClient(EndpointConfiguration endpointConfiguration) : 
                base(ModuleClient.GetBindingForEndpoint(endpointConfiguration), ModuleClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ModuleClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ModuleClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ModuleClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ModuleClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ModuleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ModuleInfo> GetModuleByIDAsync(int moduleID, string guid)
        {
            return base.Channel.GetModuleByIDAsync(moduleID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ModuleInfo[]> GetModuleListAsync(string menuName, System.Nullable<int> parentID, string name, string guid)
        {
            return base.Channel.GetModuleListAsync(menuName, parentID, name, guid);
        }
        
        public System.Threading.Tasks.Task ModifyModuleAsync(ServiceReference.ModuleInfo value, string guid)
        {
            return base.Channel.ModifyModuleAsync(value, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IModule))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IModule))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Module");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ModuleClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IModule);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ModuleClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IModule);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IModule,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRole")]
    public interface IRole
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleByID", ReplyAction="http://tempuri.org/IRole/GetRoleByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.RoleInfo> GetRoleByIDAsync(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleList", ReplyAction="http://tempuri.org/IRole/GetRoleListResponse")]
        System.Threading.Tasks.Task<ServiceReference.RoleInfo[]> GetRoleListAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/CloseRole", ReplyAction="http://tempuri.org/IRole/CloseRoleResponse")]
        System.Threading.Tasks.Task CloseRoleAsync(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/AddRole", ReplyAction="http://tempuri.org/IRole/AddRoleResponse")]
        System.Threading.Tasks.Task AddRoleAsync(ServiceReference.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/ModifyRole", ReplyAction="http://tempuri.org/IRole/ModifyRoleResponse")]
        System.Threading.Tasks.Task ModifyRoleAsync(ServiceReference.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/DeleteRole", ReplyAction="http://tempuri.org/IRole/DeleteRoleResponse")]
        System.Threading.Tasks.Task DeleteRoleAsync(ServiceReference.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleIDByLoginUser", ReplyAction="http://tempuri.org/IRole/GetRoleIDByLoginUserResponse")]
        System.Threading.Tasks.Task<int[]> GetRoleIDByLoginUserAsync(string optUser, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IRoleChannel : ServiceReference.IRole, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class RoleClient : System.ServiceModel.ClientBase<ServiceReference.IRole>, ServiceReference.IRole
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RoleClient() : 
                base(RoleClient.GetDefaultBinding(), RoleClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IRole.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleClient(EndpointConfiguration endpointConfiguration) : 
                base(RoleClient.GetBindingForEndpoint(endpointConfiguration), RoleClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RoleClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RoleClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.RoleInfo> GetRoleByIDAsync(int roleID, string guid)
        {
            return base.Channel.GetRoleByIDAsync(roleID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.RoleInfo[]> GetRoleListAsync(string name, string guid)
        {
            return base.Channel.GetRoleListAsync(name, guid);
        }
        
        public System.Threading.Tasks.Task CloseRoleAsync(int roleID, string guid)
        {
            return base.Channel.CloseRoleAsync(roleID, guid);
        }
        
        public System.Threading.Tasks.Task AddRoleAsync(ServiceReference.RoleInfo value, string guid)
        {
            return base.Channel.AddRoleAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyRoleAsync(ServiceReference.RoleInfo value, string guid)
        {
            return base.Channel.ModifyRoleAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteRoleAsync(ServiceReference.RoleInfo value, string guid)
        {
            return base.Channel.DeleteRoleAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetRoleIDByLoginUserAsync(string optUser, string guid)
        {
            return base.Channel.GetRoleIDByLoginUserAsync(optUser, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRole))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRole))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Role");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RoleClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IRole);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RoleClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IRole);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IRole,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRolePermission")]
    public interface IRolePermission
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GetRolePermission", ReplyAction="http://tempuri.org/IRolePermission/GetRolePermissionResponse")]
        System.Threading.Tasks.Task<ServiceReference.RolePermissionInfo> GetRolePermissionAsync(string roleDetailID, int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GrantRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/GrantRolePermissionsResponse")]
        System.Threading.Tasks.Task GrantRolePermissionsAsync(ServiceReference.PermissionInfo[] permissions, ServiceReference.RoleDetailInfo roleDetail, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/RetracRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/RetracRolePermissionsResponse")]
        System.Threading.Tasks.Task RetracRolePermissionsAsync(ServiceReference.PermissionInfo[] permissions, ServiceReference.RoleDetailInfo roleDetail, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IRolePermissionChannel : ServiceReference.IRolePermission, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class RolePermissionClient : System.ServiceModel.ClientBase<ServiceReference.IRolePermission>, ServiceReference.IRolePermission
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RolePermissionClient() : 
                base(RolePermissionClient.GetDefaultBinding(), RolePermissionClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IRolePermission.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RolePermissionClient(EndpointConfiguration endpointConfiguration) : 
                base(RolePermissionClient.GetBindingForEndpoint(endpointConfiguration), RolePermissionClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RolePermissionClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RolePermissionClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RolePermissionClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RolePermissionClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RolePermissionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.RolePermissionInfo> GetRolePermissionAsync(string roleDetailID, int appID, string guid)
        {
            return base.Channel.GetRolePermissionAsync(roleDetailID, appID, guid);
        }
        
        public System.Threading.Tasks.Task GrantRolePermissionsAsync(ServiceReference.PermissionInfo[] permissions, ServiceReference.RoleDetailInfo roleDetail, string guid)
        {
            return base.Channel.GrantRolePermissionsAsync(permissions, roleDetail, guid);
        }
        
        public System.Threading.Tasks.Task RetracRolePermissionsAsync(ServiceReference.PermissionInfo[] permissions, ServiceReference.RoleDetailInfo roleDetail, string guid)
        {
            return base.Channel.RetracRolePermissionsAsync(permissions, roleDetail, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRolePermission))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRolePermission))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/RolePermission");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RolePermissionClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IRolePermission);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RolePermissionClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IRolePermission);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IRolePermission,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPermission")]
    public interface IPermission
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermission", ReplyAction="http://tempuri.org/IPermission/GetPermissionResponse")]
        System.Threading.Tasks.Task<ServiceReference.PermissionInfo> GetPermissionAsync(int permissionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermissionList", ReplyAction="http://tempuri.org/IPermission/GetPermissionListResponse")]
        System.Threading.Tasks.Task<ServiceReference.PermissionInfo[]> GetPermissionListAsync(ServiceReference.ModuleInfo module, ServiceReference.RoleDetailInfo role, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/AddPermission", ReplyAction="http://tempuri.org/IPermission/AddPermissionResponse")]
        System.Threading.Tasks.Task AddPermissionAsync(string rdid, ServiceReference.PermissionInfo[] permissions, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/ModifyPermission", ReplyAction="http://tempuri.org/IPermission/ModifyPermissionResponse")]
        System.Threading.Tasks.Task ModifyPermissionAsync(string rdid, ServiceReference.PermissionInfo[] value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetUserPermission", ReplyAction="http://tempuri.org/IPermission/GetUserPermissionResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserPermissionInfo> GetUserPermissionAsync(string userName, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IPermissionChannel : ServiceReference.IPermission, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class PermissionClient : System.ServiceModel.ClientBase<ServiceReference.IPermission>, ServiceReference.IPermission
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PermissionClient() : 
                base(PermissionClient.GetDefaultBinding(), PermissionClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IPermission.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PermissionClient(EndpointConfiguration endpointConfiguration) : 
                base(PermissionClient.GetBindingForEndpoint(endpointConfiguration), PermissionClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PermissionClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PermissionClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PermissionClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PermissionClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PermissionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.PermissionInfo> GetPermissionAsync(int permissionID, string guid)
        {
            return base.Channel.GetPermissionAsync(permissionID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.PermissionInfo[]> GetPermissionListAsync(ServiceReference.ModuleInfo module, ServiceReference.RoleDetailInfo role, string guid)
        {
            return base.Channel.GetPermissionListAsync(module, role, guid);
        }
        
        public System.Threading.Tasks.Task AddPermissionAsync(string rdid, ServiceReference.PermissionInfo[] permissions, string guid)
        {
            return base.Channel.AddPermissionAsync(rdid, permissions, guid);
        }
        
        public System.Threading.Tasks.Task ModifyPermissionAsync(string rdid, ServiceReference.PermissionInfo[] value, string guid)
        {
            return base.Channel.ModifyPermissionAsync(rdid, value, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserPermissionInfo> GetUserPermissionAsync(string userName, string guid)
        {
            return base.Channel.GetUserPermissionAsync(userName, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IPermission))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IPermission))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Permission");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PermissionClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IPermission);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PermissionClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IPermission);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IPermission,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICompany")]
    public interface ICompany
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyByID", ReplyAction="http://tempuri.org/ICompany/GetCompanyByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.CompanyInfo> GetCompanyByIDAsync(int companyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyList", ReplyAction="http://tempuri.org/ICompany/GetCompanyListResponse")]
        System.Threading.Tasks.Task<ServiceReference.CompanyInfo[]> GetCompanyListAsync(string name, System.Nullable<ServiceReference.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/AddCompany", ReplyAction="http://tempuri.org/ICompany/AddCompanyResponse")]
        System.Threading.Tasks.Task AddCompanyAsync(ServiceReference.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/ModifyCompany", ReplyAction="http://tempuri.org/ICompany/ModifyCompanyResponse")]
        System.Threading.Tasks.Task ModifyCompanyAsync(ServiceReference.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/DeleteCompany", ReplyAction="http://tempuri.org/ICompany/DeleteCompanyResponse")]
        System.Threading.Tasks.Task DeleteCompanyAsync(ServiceReference.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyListFlag", ReplyAction="http://tempuri.org/ICompany/GetCompanyListFlagResponse")]
        System.Threading.Tasks.Task<ServiceReference.CompanyInfo[]> GetCompanyListFlagAsync(bool flag, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface ICompanyChannel : ServiceReference.ICompany, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class CompanyClient : System.ServiceModel.ClientBase<ServiceReference.ICompany>, ServiceReference.ICompany
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CompanyClient() : 
                base(CompanyClient.GetDefaultBinding(), CompanyClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_ICompany.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CompanyClient(EndpointConfiguration endpointConfiguration) : 
                base(CompanyClient.GetBindingForEndpoint(endpointConfiguration), CompanyClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CompanyClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CompanyClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CompanyClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CompanyClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CompanyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.CompanyInfo> GetCompanyByIDAsync(int companyID, string guid)
        {
            return base.Channel.GetCompanyByIDAsync(companyID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.CompanyInfo[]> GetCompanyListAsync(string name, System.Nullable<ServiceReference.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid)
        {
            return base.Channel.GetCompanyListAsync(name, type, isCompany, guid);
        }
        
        public System.Threading.Tasks.Task AddCompanyAsync(ServiceReference.CompanyInfo value, string guid)
        {
            return base.Channel.AddCompanyAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyCompanyAsync(ServiceReference.CompanyInfo value, string guid)
        {
            return base.Channel.ModifyCompanyAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteCompanyAsync(ServiceReference.CompanyInfo value, string guid)
        {
            return base.Channel.DeleteCompanyAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.CompanyInfo[]> GetCompanyListFlagAsync(bool flag, string guid)
        {
            return base.Channel.GetCompanyListFlagAsync(flag, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_ICompany))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_ICompany))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Company");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CompanyClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_ICompany);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CompanyClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_ICompany);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_ICompany,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IDepartment")]
    public interface IDepartment
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentByID", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.DepartmentInfo> GetDepartmentByIDAsync(int detpID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentListByName", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentListByNameResponse")]
        System.Threading.Tasks.Task<ServiceReference.DepartmentInfo[]> GetDepartmentListByNameAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/AddDepartment", ReplyAction="http://tempuri.org/IDepartment/AddDepartmentResponse")]
        System.Threading.Tasks.Task AddDepartmentAsync(ServiceReference.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/ModifyDepartment", ReplyAction="http://tempuri.org/IDepartment/ModifyDepartmentResponse")]
        System.Threading.Tasks.Task ModifyDepartmentAsync(ServiceReference.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/DeleteDepartment", ReplyAction="http://tempuri.org/IDepartment/DeleteDepartmentResponse")]
        System.Threading.Tasks.Task DeleteDepartmentAsync(ServiceReference.DepartmentInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IDepartmentChannel : ServiceReference.IDepartment, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class DepartmentClient : System.ServiceModel.ClientBase<ServiceReference.IDepartment>, ServiceReference.IDepartment
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DepartmentClient() : 
                base(DepartmentClient.GetDefaultBinding(), DepartmentClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IDepartment.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DepartmentClient(EndpointConfiguration endpointConfiguration) : 
                base(DepartmentClient.GetBindingForEndpoint(endpointConfiguration), DepartmentClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DepartmentClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DepartmentClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DepartmentClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DepartmentClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DepartmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.DepartmentInfo> GetDepartmentByIDAsync(int detpID, string guid)
        {
            return base.Channel.GetDepartmentByIDAsync(detpID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.DepartmentInfo[]> GetDepartmentListByNameAsync(string name, string guid)
        {
            return base.Channel.GetDepartmentListByNameAsync(name, guid);
        }
        
        public System.Threading.Tasks.Task AddDepartmentAsync(ServiceReference.DepartmentInfo value, string guid)
        {
            return base.Channel.AddDepartmentAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyDepartmentAsync(ServiceReference.DepartmentInfo value, string guid)
        {
            return base.Channel.ModifyDepartmentAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteDepartmentAsync(ServiceReference.DepartmentInfo value, string guid)
        {
            return base.Channel.DeleteDepartmentAsync(value, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IDepartment))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IDepartment))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Department");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DepartmentClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IDepartment);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DepartmentClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IDepartment);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IDepartment,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IGroup")]
    public interface IGroup
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupByID", ReplyAction="http://tempuri.org/IGroup/GetGroupByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.GroupInfo> GetGroupByIDAsync(int groupID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupList", ReplyAction="http://tempuri.org/IGroup/GetGroupListResponse")]
        System.Threading.Tasks.Task<ServiceReference.GroupInfo[]> GetGroupListAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetMyGroupList", ReplyAction="http://tempuri.org/IGroup/GetMyGroupListResponse")]
        System.Threading.Tasks.Task<ServiceReference.GroupInfo[]> GetMyGroupListAsync(string name, string guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/AddGroup", ReplyAction="http://tempuri.org/IGroup/AddGroupResponse")]
        System.Threading.Tasks.Task AddGroupAsync(ServiceReference.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/ModifyGroup", ReplyAction="http://tempuri.org/IGroup/ModifyGroupResponse")]
        System.Threading.Tasks.Task ModifyGroupAsync(ServiceReference.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/DeleteGroup", ReplyAction="http://tempuri.org/IGroup/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(ServiceReference.GroupInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IGroupChannel : ServiceReference.IGroup, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class GroupClient : System.ServiceModel.ClientBase<ServiceReference.IGroup>, ServiceReference.IGroup
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GroupClient() : 
                base(GroupClient.GetDefaultBinding(), GroupClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IGroup.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GroupClient(EndpointConfiguration endpointConfiguration) : 
                base(GroupClient.GetBindingForEndpoint(endpointConfiguration), GroupClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GroupClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GroupClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GroupClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GroupClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GroupClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GroupInfo> GetGroupByIDAsync(int groupID, string guid)
        {
            return base.Channel.GetGroupByIDAsync(groupID, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GroupInfo[]> GetGroupListAsync(string name, string guid)
        {
            return base.Channel.GetGroupListAsync(name, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GroupInfo[]> GetMyGroupListAsync(string name, string guid, bool flag)
        {
            return base.Channel.GetMyGroupListAsync(name, guid, flag);
        }
        
        public System.Threading.Tasks.Task AddGroupAsync(ServiceReference.GroupInfo value, string guid)
        {
            return base.Channel.AddGroupAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyGroupAsync(ServiceReference.GroupInfo value, string guid)
        {
            return base.Channel.ModifyGroupAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(ServiceReference.GroupInfo value, string guid)
        {
            return base.Channel.DeleteGroupAsync(value, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IGroup))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IGroup))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Group");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GroupClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IGroup);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GroupClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IGroup);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IGroup,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRoleDetail")]
    public interface IRoleDetail
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByUser", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByUserResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByUserResponse> GetRoleDetailByUserAsync(ServiceReference.GetRoleDetailByUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByID", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByIDResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByIDResponse> GetRoleDetailByIDAsync(ServiceReference.GetRoleDetailByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailList", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailListResponse> GetRoleDetailListAsync(ServiceReference.GetRoleDetailListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/AddRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/AddRoleDetailResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.AddRoleDetailResponse> AddRoleDetailAsync(ServiceReference.AddRoleDetailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/ModifyRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/ModifyRoleDetailResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.ModifyRoleDetailResponse> ModifyRoleDetailAsync(ServiceReference.ModifyRoleDetailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/DeleteRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/DeleteRoleDetailResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference.DeleteRoleDetailResponse> DeleteRoleDetailAsync(ServiceReference.DeleteRoleDetailRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class RoleInfo1
    {
        
        private string descField;
        
        private bool isCloseField;
        
        private bool isCloseFieldSpecified;
        
        private int lEVELSField;
        
        private bool lEVELSFieldSpecified;
        
        private string nameField;
        
        private int roleIDField;
        
        private bool roleIDFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string Desc
        {
            get
            {
                return this.descField;
            }
            set
            {
                this.descField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsClose
        {
            get
            {
                return this.isCloseField;
            }
            set
            {
                this.isCloseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsCloseSpecified
        {
            get
            {
                return this.isCloseFieldSpecified;
            }
            set
            {
                this.isCloseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int LEVELS
        {
            get
            {
                return this.lEVELSField;
            }
            set
            {
                this.lEVELSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LEVELSSpecified
        {
            get
            {
                return this.lEVELSFieldSpecified;
            }
            set
            {
                this.lEVELSFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int RoleID
        {
            get
            {
                return this.roleIDField;
            }
            set
            {
                this.roleIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RoleIDSpecified
        {
            get
            {
                return this.roleIDFieldSpecified;
            }
            set
            {
                this.roleIDFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class GroupInfo1
    {
        
        private string descField;
        
        private int groupIDField;
        
        private bool groupIDFieldSpecified;
        
        private string nameField;
        
        private string rDSLinkCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string Desc
        {
            get
            {
                return this.descField;
            }
            set
            {
                this.descField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int GroupID
        {
            get
            {
                return this.groupIDField;
            }
            set
            {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupIDSpecified
        {
            get
            {
                return this.groupIDFieldSpecified;
            }
            set
            {
                this.groupIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string RDSLinkCode
        {
            get
            {
                return this.rDSLinkCodeField;
            }
            set
            {
                this.rDSLinkCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class DepartmentInfo1
    {
        
        private int deptIDField;
        
        private bool deptIDFieldSpecified;
        
        private string descField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int DeptID
        {
            get
            {
                return this.deptIDField;
            }
            set
            {
                this.deptIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeptIDSpecified
        {
            get
            {
                return this.deptIDFieldSpecified;
            }
            set
            {
                this.deptIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string Desc
        {
            get
            {
                return this.descField;
            }
            set
            {
                this.descField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class CompanyInfo1
    {
        
        private int companyIDField;
        
        private bool companyIDFieldSpecified;
        
        private bool isCompanyField;
        
        private bool isCompanyFieldSpecified;
        
        private string nameField;
        
        private string rDSLinkField;
        
        private string rdsCompanyCodeField;
        
        private string rdsDatabaseParaField;
        
        private CompanyInfoTypeValue typeField;
        
        private bool typeFieldSpecified;
        
        private string uFDataLinkField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int CompanyID
        {
            get
            {
                return this.companyIDField;
            }
            set
            {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompanyIDSpecified
        {
            get
            {
                return this.companyIDFieldSpecified;
            }
            set
            {
                this.companyIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsCompany
        {
            get
            {
                return this.isCompanyField;
            }
            set
            {
                this.isCompanyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsCompanySpecified
        {
            get
            {
                return this.isCompanyFieldSpecified;
            }
            set
            {
                this.isCompanyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string RDSLink
        {
            get
            {
                return this.rDSLinkField;
            }
            set
            {
                this.rDSLinkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string RdsCompanyCode
        {
            get
            {
                return this.rdsCompanyCodeField;
            }
            set
            {
                this.rdsCompanyCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public string RdsDatabasePara
        {
            get
            {
                return this.rdsDatabaseParaField;
            }
            set
            {
                this.rdsDatabaseParaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public CompanyInfoTypeValue Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=7)]
        public string UFDataLink
        {
            get
            {
                return this.uFDataLinkField;
            }
            set
            {
                this.uFDataLinkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompanyInfo.TypeValue", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public enum CompanyInfoTypeValue
    {
        
        /// <remarks/>
        不明,
        
        /// <remarks/>
        分公司,
        
        /// <remarks/>
        代理商,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    public partial class RoleDetailInfo1
    {
        
        private CompanyInfo companyInfoField;
        
        private DepartmentInfo departmentInfoField;
        
        private GroupInfo groupInfoField;
        
        private string roleDetailIDField;
        
        private string roleDetailNameField;
        
        private RoleInfo roleInfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public CompanyInfo CompanyInfo
        {
            get
            {
                return this.companyInfoField;
            }
            set
            {
                this.companyInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public DepartmentInfo DepartmentInfo
        {
            get
            {
                return this.departmentInfoField;
            }
            set
            {
                this.departmentInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public GroupInfo GroupInfo
        {
            get
            {
                return this.groupInfoField;
            }
            set
            {
                this.groupInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string RoleDetailID
        {
            get
            {
                return this.roleDetailIDField;
            }
            set
            {
                this.roleDetailIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string RoleDetailName
        {
            get
            {
                return this.roleDetailNameField;
            }
            set
            {
                this.roleDetailNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public RoleInfo RoleInfo
        {
            get
            {
                return this.roleInfoField;
            }
            set
            {
                this.roleInfoField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailByUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailByUserRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public GetRoleDetailByUserRequest()
        {
        }
        
        public GetRoleDetailByUserRequest(string userName, string guid)
        {
            this.userName = userName;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailByUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailByUserResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceReference.ArrayOfXElement GetRoleDetailByUserResult;
        
        public GetRoleDetailByUserResponse()
        {
        }
        
        public GetRoleDetailByUserResponse(ServiceReference.ArrayOfXElement GetRoleDetailByUserResult)
        {
            this.GetRoleDetailByUserResult = GetRoleDetailByUserResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailByID", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailByIDRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public GetRoleDetailByIDRequest()
        {
        }
        
        public GetRoleDetailByIDRequest(string id, string guid)
        {
            this.id = id;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailByIDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailByIDResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceReference.RoleDetailInfo GetRoleDetailByIDResult;
        
        public GetRoleDetailByIDResponse()
        {
        }
        
        public GetRoleDetailByIDResponse(ServiceReference.RoleDetailInfo GetRoleDetailByIDResult)
        {
            this.GetRoleDetailByIDResult = GetRoleDetailByIDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailList", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailListRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] COMPANYID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] DEPTID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] GROUPID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] ROLEID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public GetRoleDetailListRequest()
        {
        }
        
        public GetRoleDetailListRequest(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid)
        {
            this.COMPANYID = COMPANYID;
            this.DEPTID = DEPTID;
            this.GROUPID = GROUPID;
            this.ROLEID = ROLEID;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRoleDetailListResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetRoleDetailListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public ServiceReference.RoleDetailInfo[] GetRoleDetailListResult;
        
        public GetRoleDetailListResponse()
        {
        }
        
        public GetRoleDetailListResponse(ServiceReference.RoleDetailInfo[] GetRoleDetailListResult)
        {
            this.GetRoleDetailListResult = GetRoleDetailListResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddRoleDetail", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddRoleDetailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceReference.RoleDetailInfo value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public AddRoleDetailRequest()
        {
        }
        
        public AddRoleDetailRequest(ServiceReference.RoleDetailInfo value, string guid)
        {
            this.value = value;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddRoleDetailResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddRoleDetailResponse
    {
        
        public AddRoleDetailResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ModifyRoleDetail", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ModifyRoleDetailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceReference.RoleDetailInfo value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public ModifyRoleDetailRequest()
        {
        }
        
        public ModifyRoleDetailRequest(ServiceReference.RoleDetailInfo value, string guid)
        {
            this.value = value;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ModifyRoleDetailResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ModifyRoleDetailResponse
    {
        
        public ModifyRoleDetailResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteRoleDetail", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DeleteRoleDetailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceReference.RoleDetailInfo value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string guid;
        
        public DeleteRoleDetailRequest()
        {
        }
        
        public DeleteRoleDetailRequest(ServiceReference.RoleDetailInfo value, string guid)
        {
            this.value = value;
            this.guid = guid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteRoleDetailResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DeleteRoleDetailResponse
    {
        
        public DeleteRoleDetailResponse()
        {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IRoleDetailChannel : ServiceReference.IRoleDetail, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class RoleDetailClient : System.ServiceModel.ClientBase<ServiceReference.IRoleDetail>, ServiceReference.IRoleDetail
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RoleDetailClient() : 
                base(RoleDetailClient.GetDefaultBinding(), RoleDetailClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IRoleDetail.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleDetailClient(EndpointConfiguration endpointConfiguration) : 
                base(RoleDetailClient.GetBindingForEndpoint(endpointConfiguration), RoleDetailClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleDetailClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RoleDetailClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleDetailClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RoleDetailClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RoleDetailClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByUserResponse> ServiceReference.IRoleDetail.GetRoleDetailByUserAsync(ServiceReference.GetRoleDetailByUserRequest request)
        {
            return base.Channel.GetRoleDetailByUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByUserResponse> GetRoleDetailByUserAsync(string userName, string guid)
        {
            ServiceReference.GetRoleDetailByUserRequest inValue = new ServiceReference.GetRoleDetailByUserRequest();
            inValue.userName = userName;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).GetRoleDetailByUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByIDResponse> ServiceReference.IRoleDetail.GetRoleDetailByIDAsync(ServiceReference.GetRoleDetailByIDRequest request)
        {
            return base.Channel.GetRoleDetailByIDAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GetRoleDetailByIDResponse> GetRoleDetailByIDAsync(string id, string guid)
        {
            ServiceReference.GetRoleDetailByIDRequest inValue = new ServiceReference.GetRoleDetailByIDRequest();
            inValue.id = id;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).GetRoleDetailByIDAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.GetRoleDetailListResponse> ServiceReference.IRoleDetail.GetRoleDetailListAsync(ServiceReference.GetRoleDetailListRequest request)
        {
            return base.Channel.GetRoleDetailListAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.GetRoleDetailListResponse> GetRoleDetailListAsync(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid)
        {
            ServiceReference.GetRoleDetailListRequest inValue = new ServiceReference.GetRoleDetailListRequest();
            inValue.COMPANYID = COMPANYID;
            inValue.DEPTID = DEPTID;
            inValue.GROUPID = GROUPID;
            inValue.ROLEID = ROLEID;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).GetRoleDetailListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.AddRoleDetailResponse> ServiceReference.IRoleDetail.AddRoleDetailAsync(ServiceReference.AddRoleDetailRequest request)
        {
            return base.Channel.AddRoleDetailAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AddRoleDetailResponse> AddRoleDetailAsync(ServiceReference.RoleDetailInfo value, string guid)
        {
            ServiceReference.AddRoleDetailRequest inValue = new ServiceReference.AddRoleDetailRequest();
            inValue.value = value;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).AddRoleDetailAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.ModifyRoleDetailResponse> ServiceReference.IRoleDetail.ModifyRoleDetailAsync(ServiceReference.ModifyRoleDetailRequest request)
        {
            return base.Channel.ModifyRoleDetailAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ModifyRoleDetailResponse> ModifyRoleDetailAsync(ServiceReference.RoleDetailInfo value, string guid)
        {
            ServiceReference.ModifyRoleDetailRequest inValue = new ServiceReference.ModifyRoleDetailRequest();
            inValue.value = value;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).ModifyRoleDetailAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference.DeleteRoleDetailResponse> ServiceReference.IRoleDetail.DeleteRoleDetailAsync(ServiceReference.DeleteRoleDetailRequest request)
        {
            return base.Channel.DeleteRoleDetailAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.DeleteRoleDetailResponse> DeleteRoleDetailAsync(ServiceReference.RoleDetailInfo value, string guid)
        {
            ServiceReference.DeleteRoleDetailRequest inValue = new ServiceReference.DeleteRoleDetailRequest();
            inValue.value = value;
            inValue.guid = guid;
            return ((ServiceReference.IRoleDetail)(this)).DeleteRoleDetailAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRoleDetail))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IRoleDetail))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/RoleDetail");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RoleDetailClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IRoleDetail);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RoleDetailClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IRoleDetail);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IRoleDetail,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUserRole")]
    public interface IUserRole
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRole", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserRoleInfo[]> GetUserRoleAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GrantUserRoles", ReplyAction="http://tempuri.org/IUserRole/GrantUserRolesResponse")]
        System.Threading.Tasks.Task GrantUserRolesAsync(ServiceReference.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/RetracUserRoles", ReplyAction="http://tempuri.org/IUserRole/RetracUserRolesResponse")]
        System.Threading.Tasks.Task RetracUserRolesAsync(ServiceReference.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRoleByApp", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleByAppResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserRoleInfo[]> GetUserRoleByAppAsync(string userName, int applicationID, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IUserRoleChannel : ServiceReference.IUserRole, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class UserRoleClient : System.ServiceModel.ClientBase<ServiceReference.IUserRole>, ServiceReference.IUserRole
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserRoleClient() : 
                base(UserRoleClient.GetDefaultBinding(), UserRoleClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IUserRole.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserRoleClient(EndpointConfiguration endpointConfiguration) : 
                base(UserRoleClient.GetBindingForEndpoint(endpointConfiguration), UserRoleClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserRoleClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserRoleClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserRoleClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserRoleClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserRoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserRoleInfo[]> GetUserRoleAsync(string userName, string guid)
        {
            return base.Channel.GetUserRoleAsync(userName, guid);
        }
        
        public System.Threading.Tasks.Task GrantUserRolesAsync(ServiceReference.RoleDetailInfo[] roles, string userName, string operatorName, string guid)
        {
            return base.Channel.GrantUserRolesAsync(roles, userName, operatorName, guid);
        }
        
        public System.Threading.Tasks.Task RetracUserRolesAsync(ServiceReference.RoleDetailInfo[] roles, string userName, string operatorName, string guid)
        {
            return base.Channel.RetracUserRolesAsync(roles, userName, operatorName, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserRoleInfo[]> GetUserRoleByAppAsync(string userName, int applicationID, string token)
        {
            return base.Channel.GetUserRoleByAppAsync(userName, applicationID, token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IUserRole))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IUserRole))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/UserRole");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return UserRoleClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IUserRole);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return UserRoleClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IUserRole);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IUserRole,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IToken")]
    public interface IToken
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/TestLink", ReplyAction="http://tempuri.org/IToken/TestLinkResponse")]
        System.Threading.Tasks.Task TestLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetDateTime", ReplyAction="http://tempuri.org/IToken/GetDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/InsertToToken", ReplyAction="http://tempuri.org/IToken/InsertToTokenResponse")]
        System.Threading.Tasks.Task<string> InsertToTokenAsync(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/LoginOutGuid", ReplyAction="http://tempuri.org/IToken/LoginOutGuidResponse")]
        System.Threading.Tasks.Task LoginOutGuidAsync(System.DateTime endDateTime, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getPopedomByUser", ReplyAction="http://tempuri.org/IToken/getPopedomByUserResponse")]
        System.Threading.Tasks.Task<int[]> getPopedomByUserAsync(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUser", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserResponse")]
        System.Threading.Tasks.Task<int[]> getCompanyIDByUserAsync(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUserID", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserIDResponse")]
        System.Threading.Tasks.Task<int[]> getCompanyIDByUserIDAsync(string userName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/ValidateGuid", ReplyAction="http://tempuri.org/IToken/ValidateGuidResponse")]
        System.Threading.Tasks.Task ValidateGuidAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetUserByGUID", ReplyAction="http://tempuri.org/IToken/GetUserByGUIDResponse")]
        System.Threading.Tasks.Task<string> GetUserByGUIDAsync(string Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetGroupIDByUserName", ReplyAction="http://tempuri.org/IToken/GetGroupIDByUserNameResponse")]
        System.Threading.Tasks.Task<int[]> GetGroupIDByUserNameAsync(string userName, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface ITokenChannel : ServiceReference.IToken, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class TokenClient : System.ServiceModel.ClientBase<ServiceReference.IToken>, ServiceReference.IToken
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TokenClient() : 
                base(TokenClient.GetDefaultBinding(), TokenClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IToken.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenClient(EndpointConfiguration endpointConfiguration) : 
                base(TokenClient.GetBindingForEndpoint(endpointConfiguration), TokenClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TokenClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TokenClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task TestLinkAsync()
        {
            return base.Channel.TestLinkAsync();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateTimeAsync()
        {
            return base.Channel.GetDateTimeAsync();
        }
        
        public System.Threading.Tasks.Task<string> InsertToTokenAsync(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress)
        {
            return base.Channel.InsertToTokenAsync(userName, startDateTime, endDateTime, ipAddress, machine, macAddress);
        }
        
        public System.Threading.Tasks.Task LoginOutGuidAsync(System.DateTime endDateTime, string guid)
        {
            return base.Channel.LoginOutGuidAsync(endDateTime, guid);
        }
        
        public System.Threading.Tasks.Task<int[]> getPopedomByUserAsync(string Guid, bool flag)
        {
            return base.Channel.getPopedomByUserAsync(Guid, flag);
        }
        
        public System.Threading.Tasks.Task<int[]> getCompanyIDByUserAsync(string Guid, bool flag)
        {
            return base.Channel.getCompanyIDByUserAsync(Guid, flag);
        }
        
        public System.Threading.Tasks.Task<int[]> getCompanyIDByUserIDAsync(string userName, string token)
        {
            return base.Channel.getCompanyIDByUserIDAsync(userName, token);
        }
        
        public System.Threading.Tasks.Task ValidateGuidAsync(string guid)
        {
            return base.Channel.ValidateGuidAsync(guid);
        }
        
        public System.Threading.Tasks.Task<string> GetUserByGUIDAsync(string Guid)
        {
            return base.Channel.GetUserByGUIDAsync(Guid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetGroupIDByUserNameAsync(string userName, string token)
        {
            return base.Channel.GetGroupIDByUserNameAsync(userName, token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IToken))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IToken))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Token");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TokenClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IToken);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TokenClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IToken);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IToken,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IProxy")]
    public interface IProxy
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetProtyByID", ReplyAction="http://tempuri.org/IProxy/GetProtyByIDResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo> GetProtyByIDAsync(int ProxyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/AddProxy", ReplyAction="http://tempuri.org/IProxy/AddProxyResponse")]
        System.Threading.Tasks.Task AddProxyAsync(ServiceReference.ProxyInfo[] list, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/ModifyProxy", ReplyAction="http://tempuri.org/IProxy/ModifyProxyResponse")]
        System.Threading.Tasks.Task ModifyProxyAsync(ServiceReference.ProxyInfo value, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/UpdateByID", ReplyAction="http://tempuri.org/IProxy/UpdateByIDResponse")]
        System.Threading.Tasks.Task UpdateByIDAsync(ServiceReference.ProxyInfo[] proxyInfo, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetEndDate", ReplyAction="http://tempuri.org/IProxy/GetEndDateResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo> GetEndDateAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetPopedom", ReplyAction="http://tempuri.org/IProxy/GetPopedomResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetPopedomAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAppPopedom", ReplyAction="http://tempuri.org/IProxy/GetAppPopedomResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAppPopedomAsync(string appName, string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUser", ReplyAction="http://tempuri.org/IProxy/GetAllByUserResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAllByUserAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUserNew", ReplyAction="http://tempuri.org/IProxy/GetAllByUserNewResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAllByUserNewAsync(string proxyUser, string ProxyedUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportPopedom", ReplyAction="http://tempuri.org/IProxy/GetReportPopedomResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetReportPopedomAsync(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportByAgent", ReplyAction="http://tempuri.org/IProxy/GetReportByAgentResponse")]
        System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetReportByAgentAsync(System.DateTime startDate, System.DateTime endDate, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IProxyChannel : ServiceReference.IProxy, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class ProxyClient : System.ServiceModel.ClientBase<ServiceReference.IProxy>, ServiceReference.IProxy
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ProxyClient() : 
                base(ProxyClient.GetDefaultBinding(), ProxyClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IProxy.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProxyClient(EndpointConfiguration endpointConfiguration) : 
                base(ProxyClient.GetBindingForEndpoint(endpointConfiguration), ProxyClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProxyClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ProxyClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProxyClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ProxyClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo> GetProtyByIDAsync(int ProxyID, string guid)
        {
            return base.Channel.GetProtyByIDAsync(ProxyID, guid);
        }
        
        public System.Threading.Tasks.Task AddProxyAsync(ServiceReference.ProxyInfo[] list, string opname, string guid)
        {
            return base.Channel.AddProxyAsync(list, opname, guid);
        }
        
        public System.Threading.Tasks.Task ModifyProxyAsync(ServiceReference.ProxyInfo value, string opname, string guid)
        {
            return base.Channel.ModifyProxyAsync(value, opname, guid);
        }
        
        public System.Threading.Tasks.Task UpdateByIDAsync(ServiceReference.ProxyInfo[] proxyInfo, string opname, string guid)
        {
            return base.Channel.UpdateByIDAsync(proxyInfo, opname, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo> GetEndDateAsync(string proxyUser, string guid)
        {
            return base.Channel.GetEndDateAsync(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetPopedomAsync(string proxyUser, string guid)
        {
            return base.Channel.GetPopedomAsync(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAppPopedomAsync(string appName, string proxyUser, string guid)
        {
            return base.Channel.GetAppPopedomAsync(appName, proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAllByUserAsync(string proxyUser, string guid)
        {
            return base.Channel.GetAllByUserAsync(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetAllByUserNewAsync(string proxyUser, string ProxyedUser, string guid)
        {
            return base.Channel.GetAllByUserNewAsync(proxyUser, ProxyedUser, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetReportPopedomAsync(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token)
        {
            return base.Channel.GetReportPopedomAsync(createDate, endCreatDate, token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ProxyInfo[]> GetReportByAgentAsync(System.DateTime startDate, System.DateTime endDate, string guid)
        {
            return base.Channel.GetReportByAgentAsync(startDate, endDate, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IProxy))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IProxy))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Proxy");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ProxyClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IProxy);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ProxyClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IProxy);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IProxy,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUser")]
    public interface IUser
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Login", ReplyAction="http://tempuri.org/IUser/LoginResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo> LoginAsync(string password, string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ActingLogin", ReplyAction="http://tempuri.org/IUser/ActingLoginResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo> ActingLoginAsync(string password, string loginName, string actingLoginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAll", ReplyAction="http://tempuri.org/IUser/GetAllResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllNew", ReplyAction="http://tempuri.org/IUser/GetAllNewResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllNewAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllWithDeleted", ReplyAction="http://tempuri.org/IUser/GetAllWithDeletedResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllWithDeletedAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByName", ReplyAction="http://tempuri.org/IUser/GetUserByNameResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserByNameAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUser", ReplyAction="http://tempuri.org/IUser/GetUserResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add", ReplyAction="http://tempuri.org/IUser/AddResponse")]
        System.Threading.Tasks.Task AddAsync(ServiceReference.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Modify", ReplyAction="http://tempuri.org/IUser/ModifyResponse")]
        System.Threading.Tasks.Task ModifyAsync(ServiceReference.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Delete", ReplyAction="http://tempuri.org/IUser/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(ServiceReference.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Close", ReplyAction="http://tempuri.org/IUser/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync(ServiceReference.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetModulePermissions", ReplyAction="http://tempuri.org/IUser/GetModulePermissionsResponse")]
        System.Threading.Tasks.Task<ServiceReference.ModulePermissionInfo[]> GetModulePermissionsAsync(string appName, string appVersion, ServiceReference.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByApp", ReplyAction="http://tempuri.org/IUser/GetUserByAppResponse")]
        System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserByAppAsync(int applicationID, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IUserChannel : ServiceReference.IUser, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class UserClient : System.ServiceModel.ClientBase<ServiceReference.IUser>, ServiceReference.IUser
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserClient() : 
                base(UserClient.GetDefaultBinding(), UserClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IUser.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserClient(EndpointConfiguration endpointConfiguration) : 
                base(UserClient.GetBindingForEndpoint(endpointConfiguration), UserClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo> LoginAsync(string password, string loginName)
        {
            return base.Channel.LoginAsync(password, loginName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo> ActingLoginAsync(string password, string loginName, string actingLoginName)
        {
            return base.Channel.ActingLoginAsync(password, loginName, actingLoginName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllAsync(string guid)
        {
            return base.Channel.GetAllAsync(guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllNewAsync(string guid)
        {
            return base.Channel.GetAllNewAsync(guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetAllWithDeletedAsync(string guid)
        {
            return base.Channel.GetAllWithDeletedAsync(guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserByNameAsync(string userName, string guid)
        {
            return base.Channel.GetUserByNameAsync(userName, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserAsync(string userName, string guid)
        {
            return base.Channel.GetUserAsync(userName, guid);
        }
        
        public System.Threading.Tasks.Task AddAsync(ServiceReference.UserInfo value, string guid)
        {
            return base.Channel.AddAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyAsync(ServiceReference.UserInfo value, string guid)
        {
            return base.Channel.ModifyAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(ServiceReference.UserInfo value, string guid)
        {
            return base.Channel.DeleteAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task CloseAsync(ServiceReference.UserInfo value, string guid)
        {
            return base.Channel.CloseAsync(value, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.ModulePermissionInfo[]> GetModulePermissionsAsync(string appName, string appVersion, ServiceReference.UserInfo value, string guid)
        {
            return base.Channel.GetModulePermissionsAsync(appName, appVersion, value, guid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.UserInfo[]> GetUserByAppAsync(int applicationID, string token)
        {
            return base.Channel.GetUserByAppAsync(applicationID, token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync1()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IUser))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IUser))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/User");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return UserClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IUser);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return UserClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IUser);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IUser,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAuthorizedLog")]
    public interface IAuthorizedLog
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoList", ReplyAction="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoListResponse")]
        System.Threading.Tasks.Task<ServiceReference.AuthorizedLogInfo[]> GetAuthorizedLogInfoListAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IAuthorizedLogChannel : ServiceReference.IAuthorizedLog, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class AuthorizedLogClient : System.ServiceModel.ClientBase<ServiceReference.IAuthorizedLog>, ServiceReference.IAuthorizedLog
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthorizedLogClient() : 
                base(AuthorizedLogClient.GetDefaultBinding(), AuthorizedLogClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IAuthorizedLog.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizedLogClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthorizedLogClient.GetBindingForEndpoint(endpointConfiguration), AuthorizedLogClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizedLogClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthorizedLogClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizedLogClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthorizedLogClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizedLogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AuthorizedLogInfo[]> GetAuthorizedLogInfoListAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid)
        {
            return base.Channel.GetAuthorizedLogInfoListAsync(startDate, endDate, userName, operatorName, roleID, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IAuthorizedLog))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IAuthorizedLog))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/AuthorizedLog");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuthorizedLogClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IAuthorizedLog);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuthorizedLogClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IAuthorizedLog);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IAuthorizedLog,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMenu")]
    public interface IMenu
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenu/GetMenuByModuleName", ReplyAction="http://tempuri.org/IMenu/GetMenuByModuleNameResponse")]
        System.Threading.Tasks.Task<ServiceReference.MenuInfo> GetMenuByModuleNameAsync(int moduleID, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IMenuChannel : ServiceReference.IMenu, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class MenuClient : System.ServiceModel.ClientBase<ServiceReference.IMenu>, ServiceReference.IMenu
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MenuClient() : 
                base(MenuClient.GetDefaultBinding(), MenuClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IMenu.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MenuClient(EndpointConfiguration endpointConfiguration) : 
                base(MenuClient.GetBindingForEndpoint(endpointConfiguration), MenuClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MenuClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MenuClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MenuClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MenuClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MenuClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.MenuInfo> GetMenuByModuleNameAsync(int moduleID, string guid)
        {
            return base.Channel.GetMenuByModuleNameAsync(moduleID, guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IMenu))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IMenu))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8888/ServiceControler/Menu");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MenuClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IMenu);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MenuClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IMenu);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IMenu,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.1")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
